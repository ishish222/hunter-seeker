### oznaczenie sciezek z punktu widzenia fuzzer:
external_paths_machines - katalog, gdzie znajduja sie dyski maszyn
external_paths_src - katalog, skad zaciagane sa probki i do ktorego odnosi sie np GlobPattern
external_paths_log - katalog, w ktorym gromadzone sa logi 
external_paths_images - katalog, w ktorym gromadzone sa obrazy

external_paths_final_all_output - sciezka OSTATECZNYCH WYNIKOW WSZYSTKICH badan
external_paths_final_output - OSTATECZNA sciezka AKTUALNEGO WYNIKU

external_paths_tmp_all_input_output - sciezka TYMCZASOWYCH WKLADOW i WYNIKOW WSZYSTKICH badan

external_paths_tmp_input_output - TYMCZASOWA sciezka WKLADU i WYNIKU AKTUALNEGO badania
external_paths_tmp_input - TYMCZASOWA sciezka AKTUALNEGO WKLADU 
external_paths_tmp_output - TYMCZASOWA sciezka AKTUALNEGO WYNIKU
external_paths_tmp_log - TYMCZASOWA sciezka AKTUALNYCH LOGÃ“W

external_paths_link_tmp_output_final_output - czy linkowac TYMCZASOWE WYNIKI AKTUALNEGO badania do OSTATECZNEGO katalogu WSZYSTKICH badan

### caller_taint:

commandline options:

-M define max_levels. This defines, how many call level stack will handle. Increase it if you receive error saying that you should do so.
-i instr_file. This defines the first file in sequence that will be parsed.
-d dump file path. Passed via script.
-s start addr (if starts with '0x') or start instruction number.
-E end addr (if starts with '0x') or end instruction number, multiplied by 1000000
-e end addr (if starts with '0x') or end instruction number, multiplied by 1000000
-T dump taint file path [TODO - what is it]
-l depth, hexadecimal. Defines how many levels will the analyzer dive into. [TODO - verify, seems like its diving much further]
-m loadable dir path [TODO - what is it]
-b breakpoint_optarg [TODO - remind how it works]
-t breakpoint_t_optarg [TODO - remind how it works]
-w watchpoint_optarg [TODO - remind how it works]
-h history_path
-D depth, hexadecimal. Defines how many levels will the analyzer dive into. [TODO - verify, seems like its diving much further]
-I include instruction numbers

Configuration in script:

OP - set option
    syntax: OP,<options_name>

    current options names:
    ANALYZE_JUMPS:
        graph_plugin will output jump instructions (enabled by default). 
        
    ANALYZE_LOOPS:
        graph_plugin will avoid printing looped calls (based on registered fences, see FE below). 

    UNMATCHED_RET_INVALIDATES_STACK:
        graph_plugin will handle unmatched rets in the following way: All ret addresses on the stack are being invalidated and it is treated as return from several functions (enabled by default)

    UNMATCHED_RET_CREATES_CALL:
        graph_plugin will handle unmatched rets in the following way: NOT IMPLEMENTED!!!.

    NOT_EMITTING_BLACKLISTED:
        graph_plugin will not emit blacklisted addresses and libraries (configured with BA, BL, see below) (enabled by default)

    VERIFY_ROP_RETS:
        graph_plugin will check if ret addess points to symbol, which would suggest executing ROP payload.

    VERIFY_SEG_SEC:
        Analyzer will verify segment security layers. You can set security layers manually in *.out files (see: SE - secure area, below) (enabled by default)

    ANALYZE_WANTED_IN_SYMBOLS:
        graph_plugin will mark wanted instructions and functions (configured with FW, EW, IW, see below) with [x] (enabled by default). 

    COUNT_INSTRUCTIONS:
        For taint analysis. Marks executed instructions as tainted (in addition to marking operands).
    
    OPTION_HANDLE_BREAKPOINTS:
        [todo]
    
    OPTION_VERIFY_OOB:
        [todo]

    OPTION_INDEXES_PROPAGATE:
        taint_plugin will mark byte as propagation source if it is used as index in transfer

BR - register memory breakpoint
    The syntax is this:
        Entries for individual breakpoints are separated with '+'
        Each entry takes the form: <name>:<tid>,<instruction_no>,<address>,<mode>

        mode can be: READ,WRITE,EXECUTE

BN - break now (not implemented yet)

BT - register taint breakpoint
    The syntax is this:
        Entries for individual breakpoints are separated with '+'
        Each entry takes the form: <offset>,<mem_offset>,<mode>

        mode can be: READ,WRITE,EXECUTE

BW - register trace watchpoint
    The syntax is this:
        Entries for individual breakpoints are separated with '+'
        Each entry takes the form: <offset>,<mem_offset>,<tid>,<name>

        if offset is prefixed with "i", the watchpoint is an interactive watchpoint

BA - blacklist address
    syntax: BA,<address>

    if address is without symbol and is blacklisted, caller will not dive. WARNING!!!: add space at the end (to fix)
    
SA - silence address
    syntax: SA,<address>

    if SOURCE address is silenced, caller will not emit. WARNING!!!: add space at the end (to fix)
    
BL - blacklist library
    syntax: BL,<lib_name>

    All addresses in blacklisted library will be blacklisted. WARNING!!!: add space at the end (to fix)
    
IN - include symbol in call analysis
    syntax: IN,<func_name>
    
    Symbol with func_name will be dived into

FW - wanted function
    syntax: FW,<func_name>

    Symbol with func_name will be marked [x]

SY - register symbol
    syntax: SY,<lib_name>,<func_name><CRLF>

    Define symbol. Symbols are not dived into

LF - load next file
    syntax: LF,<file_name> 

    Load next file for anaysis

OM - load modifications file
    syntax: OM,<mod_file>

    Load the modifications file for servicing UP requests. 
    CONFIGURED AUTOMATICALLY, DO NOT CHANGE

SP - set prefix
    syntax: SP,<prefix>

    Sets prefix for output files

RT - register thread
    syntax: RT,<TID>,<formatted_context>

    Registering thread
    CONFIGURED AUTOMATICALLY, DO NOT CHANGE

DT - deregister thread
    syntax: DT,<TID>,<formatted_context>

    Deregistering thread
    CONFIGURED AUTOMATICALLY, DO NOT CHANGE

RL - register library
    syntax: RL,<lib_addr>,<lib_name>

    Register library
    CONFIGURED AUTOMATICALLY, DO NOT CHANGE


DL - deregister library
    syntax: DL,<lib_name>

    Deregister library
    CONFIGURED AUTOMATICALLY, DO NOT CHANGE

LM - load memory file
    syntax: LM,<memory_file>

    Register memory file
    CONFIGURED AUTOMATICALLY, DO NOT CHANGE

SE - secure area
    syntax: SE,<addr>,<size>

    Secure memory area. No modifications to this area will be made during analysis

PA - pause analysis 
    syntax: PA

    Analysis will pause and wait for keypress

EX - register exception
    syntax: EX,<TID>,<exc_code>,<exc_flags>,<exc_address>

    Register exception in a thread

IR - get instruction interval
    syntax: IR,<count>

    Will report after elapsed interval

IW - register wanted instruction number
    syntax: IW,<instr_num>

    Instruction number <instr_num> will be [x] marked
    
EW - register wanted address
    syntax: EW,<address>

    Instruction with address <address> will be [x] marked

CT - check consistency (for debugging)
    syntax: CT,<TID>,<formatted_context>

    Verify consistency of thread's context
    CONFIGURED AUTOMATICALLY, DO NOT CHANGE

FE - register fence
    syntax: FE,<entry_addr>,<start_addr>,<loop_size>,<loop_count>

    Create a fence for loops. 
    entry_addr - this is target of call of a loop addr
    start_addr - first call addr in a loop
    loop_size - how many calls in loop
    loop_count - how many loop iterations
    
JE - jxx_enable
    syntax: JE

    Enables JXX inclusion in analysis. Only one jxx address will be wirtten out in particular callee. jxx addresses list will be reset upon return or JC command.

JD - jxx_disable
    syntax: JD

    Disable JXX analysis

JC - jxx_clear
    syntax: JC

    Clears jxx addresses list

ST - start analysis
    syntax: ST

    Analysis start. [TODO: what are the consequences?]

FI - finish analysis
    syntax: FI 

    Analysis finish. [TODO: what are the consequences?]

OU - comment out
    syntax: OU,<TID>,<comment>

    Include comment in TID output file.

SC - syscall
    syntax: SC,<TID>,<syscall_no>

    Syscall has been made. This information is consumed in IoC research.

# - comment (ignored)
    syntax: #

    Ignore rest of the line

UP - update memory 
    syntax: UP,offset,size

    Apply memory update at given offset and size

CP - update and check memory 
    syntax: CP,offset,size

    Apply memory update at given offset and size. Check if it's different than the actual content. If so, generate alert.


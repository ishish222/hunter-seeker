import statemachine
import usualparts.hs_logging
import usualparts.other_parts 
import usualparts.diagnostic
import usualparts.qemu_parts
import usualparts.disk_fs_parts

import generators

AutogeneratedDisk = statemachine.State()
AutogeneratedDisk.name = "Create disk & autogenerate samples"
AutogeneratedDisk.consequence = statemachine.Exit
AutogeneratedDisk.executing_routine = usualparts.disk_fs_parts.prepare_disk_autogenerated

AutogeneratedMethod = statemachine.State()
AutogeneratedMethod.name = "Generating saved using autogenerate"
AutogeneratedMethod.consequence = AutogeneratedDisk
AutogeneratedMethod.executing_routine = usualparts.disk_fs_parts.create_saved_disk_autogenerated

GlobMethod = statemachine.State()
GlobMethod.name = "Generating saved using glob"
GlobMethod.consequence = statemachine.Exit
GlobMethod.executing_routine = usualparts.disk_fs_parts.create_saved_disk_glob

def choosing_saved_disk_procedure():
    import globs
    options = globs.state.options

    if(options.samples_source == "autogenerated_batch"):
        return AutogeneratedMethod
    else:
        return GlobMethod

ChooseSavedMethod = statemachine.State()
ChooseSavedMethod.name = "Choosing method"
ChooseSavedMethod.consequence = None
ChooseSavedMethod.choosing_consequence = choosing_saved_disk_procedure
ChooseSavedMethod.executing_routine = usualparts.qemu_parts.qemu_bind_pipes

PreparePipes = statemachine.State()
PreparePipes.name = "Prepare pipes"
PreparePipes.consequence = ChooseSavedMethod
PreparePipes.executing_routine = usualparts.qemu_parts.qemu_bind_pipes

PrepareStats = statemachine.State()
PrepareStats.name = "Prepare stats"
PrepareStats.consequence = PreparePipes
PrepareStats.executing_routine = usualparts.diagnostic.prepare_stats

RegisterSignals = statemachine.State()
RegisterSignals.name = "Register signals"
RegisterSignals.consequence = PrepareStats
RegisterSignals.executing_routine = usualparts.other_parts.register_signals

EnableLogging = statemachine.State()
EnableLogging.name = "Enabling & testing logging"
EnableLogging.consequence = RegisterSignals
EnableLogging.executing_routine = usualparts.hs_logging.enable_logging

GetOptions = statemachine.State()
GetOptions.name = "Get options"
GetOptions.consequence = EnableLogging
GetOptions.executing_routine = usualparts.other_parts.get_options

PrintLogo = statemachine.State()
PrintLogo.name = "Print logo"
PrintLogo.consequence = GetOptions
PrintLogo.executing_routine = usualparts.other_parts.print_logo



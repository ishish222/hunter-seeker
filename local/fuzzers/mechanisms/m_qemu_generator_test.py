import qemu_parts
import disk_fs_parts
import binner_parts
import other_parts
import mechanisms as m
import sys
sys.path += ["../../common"]
import common
import os
import time

read_socket = common.read_socket
write_socket = common.write_socket
report = common.report

def mechanism_prepare(options, state):
    if(options.args == None): raise Exception
    options.generate = my_generate

def my_generate(options):
    generator, mutator, corrector = options.args.split(",")
    samples_list = []
    common.create_layout(options)
    os.spawnv(os.P_WAIT, "/bin/cp", ["cp", "-r", options.origin, options.tmp_mountpoint+"/samples/shared"])

    print("Testing generator %s with mutator %s" % (generator, mutator))
    
    if(generator != "None"):
        generator_mod, generator_class = generator.split(".")
        import_stat = "import generators.%s as genmod" % generator_mod
        exec import_stat
        assign_stat = "genclass = genmod.%s" % generator_class
        exec assign_stat
    else:
        raise Exception

    if(mutator != "None"):
        mutator_mod, mutator_class = mutator.split(".")
        import_stat = "import generators.%s as mutmod" % mutator_mod
        exec import_stat
        assign_stat = "mutclass = mutmod.%s" % mutator_class
        exec assign_stat
    else:
        raise Exception

    if(corrector != "None"):
        corrector_mod, corrector_def = corrector.split(".")
        import_stat = "import correctors.%s as correctmod" % corrector_mod
        exec import_stat
        assign_stat = "correctdef = correctmod.%s" % corrector_def
        exec assign_stat
    else:
        correctdef = None

    my_generator = genclass(options.origin, options.tmp_mountpoint+"/samples/shared", mutator_=mutclass, corrector = correctdef)
    my_generator.mutations=int(options.mutations)

    print(my_generator)
    print(mutclass)

    samples_list += my_generator.generate(options.samples_count)

    print("Generated samples")
    return samples_list

def mechanism_prepare_dir_glob(options, state):
    if(options.args == None): raise Exception
    options.generate = my_generate_dir_glob

def my_generate_dir_glob(options):
    generator, mutator, corrector, glob_pattern = options.args.split(",")
    samples_list = []
    common.create_layout(options)
    os.spawnv(os.P_WAIT, "/bin/cp", ["cp", options.origin, options.tmp_mountpoint+"/samples/shared"])

    print("Testing generator %s with mutator %s" % (generator, mutator))
    
    if(generator != "None"):
        generator_mod, generator_class = generator.split(".")
        import_stat = "import generators.%s as genmod" % generator_mod
        exec import_stat
        assign_stat = "genclass = genmod.%s" % generator_class
        exec assign_stat
    else:
        raise Exception

    if(mutator != "None"):
        mutator_mod, mutator_class = mutator.split(".")
        import_stat = "import generators.%s as mutmod" % mutator_mod
        exec import_stat
        assign_stat = "mutclass = mutmod.%s" % mutator_class
        exec assign_stat
    else:
        raise Exception

    if(corrector != "None"):
        corrector_mod, corrector_def = corrector.split(".")
        import_stat = "import correctors.%s as correctmod" % corrector_mod
        exec import_stat
        assign_stat = "correctdef = correctmod.%s" % corrector_def
        exec assign_stat
    else:
        correctdef = None

    my_generator = genclass(options.origin, options.tmp_mountpoint+"/samples/shared", mutator_=mutclass, corrector = correctdef, fext = glob_pattern)
    my_generator.mutations=int(options.mutations)

    print(my_generator)
    print(mutclass)

    samples_list += my_generator.generate(options.samples_count)

    print("Generated samples")
    return samples_list

qemu_generator = {
    "name" : "Generator test",
    "start" : m.step(
        mechanism_prepare,
        next_step = "qemu_prepare"
        ),
    "qemu_prepare" : m.step(
        qemu_parts.qemu_prepare, 
        next_step = "create_saved_disk_autogenerated"
        ),
    "create_saved_disk_autogenerated" : m.step(
        disk_fs_parts.create_saved_disk_autogenerated, 
        next_step = "prepare_disk_autogenerated"
        ), 
    "prepare_disk_autogenerated" : m.step(
        disk_fs_parts.prepare_disk_autogenerated,
        next_step = "stop"
        ),
    "exit_failure" : m.step(
        other_parts.exit_failure,
        next_step = "stop",
        ),
    "stop" : m.step(
        is_final = True
        )
}

qemu_generator_dir_glob = {
    "name" : "Dir glob generator test",
    "start" : m.step(
        mechanism_prepare_dir_glob,
        next_step = "qemu_prepare"
        ),
    "qemu_prepare" : m.step(
        qemu_parts.qemu_prepare, 
        next_step = "create_saved_disk_autogenerated"
        ),
    "create_saved_disk_autogenerated" : m.step(
        disk_fs_parts.create_saved_disk_autogenerated, 
        next_step = "prepare_disk_autogenerated"
        ), 
    "prepare_disk_autogenerated" : m.step(
        disk_fs_parts.prepare_disk_autogenerated,
        next_step = "stop"
        ),
    "exit_failure" : m.step(
        other_parts.exit_failure,
        next_step = "stop",
        ),
    "stop" : m.step(
        is_final = True
        )
}


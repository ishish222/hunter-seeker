// LameCrypt.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <windows.h>
#include "SDK\SDK.h"

typedef struct MEMORY_COMPARE_HANDLER{
	union {
		BYTE bArrayEntry[1];		
		WORD wArrayEntry[1];
		DWORD dwArrayEntry[1];
		DWORD64 qwArrayEntry[1];
	} Array;
}MEMORY_COMPARE_HANDLER, *PMEMORY_COMPARE_HANDLER;

#define Z_OK 0
bool __cdecl mPackDecompress(void* Source, DWORD SizeOfInputBuffer, void* Destination, LPDWORD SizeOfOutputBuffer, DWORD Reserved);
typedef int(__cdecl *fUuncompress)(void* dest, LPDWORD destLen, void* source, long sourceLen);

int main(int argc, char* argv[]){

	int i;
	int zLibRet;
	DWORD FileSize;
	HANDLE FileMap;
	HANDLE FileHandle;
	ULONG_PTR FileMapVA;
	DWORD OverlayStart;
	DWORD OverlaySize;
	DWORD PackedFileSize;
	DWORD UnpackedFileSize;
	PMEMORY_COMPARE_HANDLER checkSignature;
	char szOriginalFile[MAX_PATH] = {};
	char szLibraryPath[MAX_PATH] = {};
	fUuncompress myUncompress;
	void* DecompressedBuffer;
	DWORD NumberOfBytes;
	HANDLE hFile;

	lstrcpyA(szOriginalFile, argv[1]);
	lstrcatA(szOriginalFile, ".bak");
	printf("Unpacker for mPack 0.2 - 0.3\r\nfrom ReversingLabs Corporation - www.reversinglabs.com\r\n\r\n");
	if(CopyFileA(argv[1], szOriginalFile, false)){
		if(FindOverlay(szOriginalFile, &OverlayStart, &OverlaySize)){
			if(StaticFileLoad(szOriginalFile, UE_ACCESS_READ, false, &FileHandle, &FileSize, &FileMap, &FileMapVA)){
				checkSignature = (PMEMORY_COMPARE_HANDLER)(FileMapVA + OverlayStart);
				PackedFileSize = checkSignature->Array.dwArrayEntry[0];
				checkSignature = (PMEMORY_COMPARE_HANDLER)(FileMapVA + OverlayStart + 4);
				if(PackedFileSize > OverlaySize && checkSignature->Array.bArrayEntry[0] == 0x78){
					GetModuleFileNameA(NULL, szLibraryPath, MAX_PATH);
					i = lstrlenA(szLibraryPath);
					while(szLibraryPath[i] != 0x5C){
						szLibraryPath[i] = 0x00;
						i--;
					}
					lstrcatA(szLibraryPath, "zlib1.dll");
					LoadLibraryA(szLibraryPath);
					myUncompress = (fUuncompress)GetProcAddress(GetModuleHandleA("zlib1.dll"), "uncompress");
					if((void*)myUncompress != NULL){
						UnpackedFileSize = PackedFileSize * 4;
						DecompressedBuffer = VirtualAlloc(NULL, UnpackedFileSize, MEM_COMMIT, PAGE_READWRITE);
						if(DecompressedBuffer != NULL){
							zLibRet = myUncompress((void*)DecompressedBuffer, &UnpackedFileSize, (void*)checkSignature, PackedFileSize);
							if(zLibRet == Z_OK){
								hFile = CreateFileA(argv[1], GENERIC_WRITE, FILE_SHARE_READ, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);
								if(hFile != INVALID_HANDLE_VALUE){
									WriteFile(hFile, DecompressedBuffer, UnpackedFileSize, &NumberOfBytes, NULL);
									CloseHandle(hFile);
									VirtualFree(DecompressedBuffer, NULL, MEM_RELEASE);
									printf("mPack 0.3 packed file was successfully unpacked!\r\n");
								}
							}else{
								printf("Error during Zlib decompression!\r\n");
							}
						}
					}else{
						printf("Could not load zlib1.dll!\r\n");
					}
				}else if(PackedFileSize < OverlaySize){
					DecompressedBuffer = VirtualAlloc(NULL, 0x4000, MEM_COMMIT, PAGE_READWRITE);
					if(DecompressedBuffer != NULL){
						hFile = CreateFileA(argv[1], GENERIC_WRITE, FILE_SHARE_READ, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);
						if(hFile != INVALID_HANDLE_VALUE){
							while(PackedFileSize > NULL){
								mPackDecompress((void*)checkSignature, PackedFileSize, DecompressedBuffer, &UnpackedFileSize, NULL);
								WriteFile(hFile, DecompressedBuffer, UnpackedFileSize, &NumberOfBytes, NULL);
								checkSignature = (PMEMORY_COMPARE_HANDLER)((ULONG_PTR)checkSignature + PackedFileSize);
								PackedFileSize = checkSignature->Array.dwArrayEntry[0];
								checkSignature = (PMEMORY_COMPARE_HANDLER)((ULONG_PTR)checkSignature + 4);
							}
							CloseHandle(hFile);
						}
						VirtualFree(DecompressedBuffer, NULL, MEM_RELEASE);
						printf("mPack 0.2 packed file was successfully unpacked!\r\n");
					}
				}else{
					printf("File isn't packed with mPack 0.2 - 0.3!\r\n");
				}
				StaticFileUnload(argv[1], false, FileHandle, FileSize, FileMap, FileMapVA);
			}
		}else{
			printf("File isn't packed with mPack!\r\n");
		}
	}else{
		printf("Could not backup selected input file!\r\n");
	}
	return 0;
}

__declspec(naked) bool __cdecl mPackDecompress(void* Source, DWORD SizeOfInputBuffer, void* Destination, LPDWORD SizeOfOutputBuffer, DWORD Reserved){

	__asm{
		__emit 0x55;
		__emit 0x57;
		__emit 0x56;
		__emit 0x53;
		__emit 0x51;
		__emit 0x52;
		__emit 0x83;
		__emit 0xEC;
		__emit 0x08;
		__emit 0x89;
		__emit 0xE3;
		__emit 0xFC;
		__emit 0x8B;
		__emit 0x73;
		__emit 0x24;
		__emit 0x8B;
		__emit 0x7B;
		__emit 0x2C;
		__emit 0x89;
		__emit 0xF8;
		__emit 0x8B;
		__emit 0x53;
		__emit 0x30;
		__emit 0x03;
		__emit 0x02;
		__emit 0x0F;
		__emit 0x82;
		__emit 0xCE;
		__emit 0x01;
		__emit 0x00;
		__emit 0x00;
		__emit 0x89;
		__emit 0x03;
		__emit 0x89;
		__emit 0xF0;
		__emit 0x03;
		__emit 0x43;
		__emit 0x28;
		__emit 0x0F;
		__emit 0x82;
		__emit 0xC1;
		__emit 0x01;
		__emit 0x00;
		__emit 0x00;
		__emit 0x89;
		__emit 0x43;
		__emit 0x04;
		__emit 0x83;
		__emit 0xCD;
		__emit 0xFF;
		__emit 0x31;
		__emit 0xC9;
		__emit 0xEB;
		__emit 0x29;
		__emit 0x90;
		__emit 0x90;
		__emit 0x90;
		__emit 0x90;
		__emit 0x90;
		__emit 0x90;
		__emit 0x90;
		__emit 0x90;
		__emit 0x90;
		__emit 0x90;
		__emit 0x3B;
		__emit 0x74;
		__emit 0x24;
		__emit 0x04;
		__emit 0x0F;
		__emit 0x83;
		__emit 0x75;
		__emit 0x01;
		__emit 0x00;
		__emit 0x00;
		__emit 0x3B;
		__emit 0x3C;
		__emit 0x24;
		__emit 0x0F;
		__emit 0x83;
		__emit 0x8C;
		__emit 0x01;
		__emit 0x00;
		__emit 0x00;
		__emit 0x8A;
		__emit 0x06;
		__emit 0x46;
		__emit 0x88;
		__emit 0x07;
		__emit 0x47;
		__emit 0x00;
		__emit 0xDB;
		__emit 0x73;
		__emit 0x13;
		__emit 0x75;
		__emit 0xE1;
		__emit 0x3B;
		__emit 0x74;
		__emit 0x24;
		__emit 0x04;
		__emit 0x0F;
		__emit 0x83;
		__emit 0x56;
		__emit 0x01;
		__emit 0x00;
		__emit 0x00;
		__emit 0x8A;
		__emit 0x1E;
		__emit 0x46;
		__emit 0x10;
		__emit 0xDB;
		__emit 0x72;
		__emit 0xD0;
		__emit 0xB8;
		__emit 0x01;
		__emit 0x00;
		__emit 0x00;
		__emit 0x00;
		__emit 0x00;
		__emit 0xDB;
		__emit 0x75;
		__emit 0x0F;
		__emit 0x3B;
		__emit 0x74;
		__emit 0x24;
		__emit 0x04;
		__emit 0x0F;
		__emit 0x83;
		__emit 0x3C;
		__emit 0x01;
		__emit 0x00;
		__emit 0x00;
		__emit 0x8A;
		__emit 0x1E;
		__emit 0x46;
		__emit 0x10;
		__emit 0xDB;
		__emit 0x11;
		__emit 0xC0;
		__emit 0x0F;
		__emit 0x88;
		__emit 0x56;
		__emit 0x01;
		__emit 0x00;
		__emit 0x00;
		__emit 0x00;
		__emit 0xDB;
		__emit 0x73;
		__emit 0x13;
		__emit 0x75;
		__emit 0x2F;
		__emit 0x3B;
		__emit 0x74;
		__emit 0x24;
		__emit 0x04;
		__emit 0x0F;
		__emit 0x83;
		__emit 0x1F;
		__emit 0x01;
		__emit 0x00;
		__emit 0x00;
		__emit 0x8A;
		__emit 0x1E;
		__emit 0x46;
		__emit 0x10;
		__emit 0xDB;
		__emit 0x72;
		__emit 0x1E;
		__emit 0x48;
		__emit 0x00;
		__emit 0xDB;
		__emit 0x75;
		__emit 0x0F;
		__emit 0x3B;
		__emit 0x74;
		__emit 0x24;
		__emit 0x04;
		__emit 0x0F;
		__emit 0x83;
		__emit 0x09;
		__emit 0x01;
		__emit 0x00;
		__emit 0x00;
		__emit 0x8A;
		__emit 0x1E;
		__emit 0x46;
		__emit 0x10;
		__emit 0xDB;
		__emit 0x11;
		__emit 0xC0;
		__emit 0x0F;
		__emit 0x88;
		__emit 0x23;
		__emit 0x01;
		__emit 0x00;
		__emit 0x00;
		__emit 0xEB;
		__emit 0xB0;
		__emit 0x3D;
		__emit 0x02;
		__emit 0x00;
		__emit 0x00;
		__emit 0x01;
		__emit 0x0F;
		__emit 0x87;
		__emit 0x16;
		__emit 0x01;
		__emit 0x00;
		__emit 0x00;
		__emit 0x83;
		__emit 0xE8;
		__emit 0x03;
		__emit 0x72;
		__emit 0x3C;
		__emit 0xC1;
		__emit 0xE0;
		__emit 0x08;
		__emit 0x3B;
		__emit 0x74;
		__emit 0x24;
		__emit 0x04;
		__emit 0x0F;
		__emit 0x83;
		__emit 0xDD;
		__emit 0x00;
		__emit 0x00;
		__emit 0x00;
		__emit 0x8A;
		__emit 0x06;
		__emit 0x46;
		__emit 0x83;
		__emit 0xF0;
		__emit 0xFF;
		__emit 0x0F;
		__emit 0x84;
		__emit 0xC6;
		__emit 0x00;
		__emit 0x00;
		__emit 0x00;
		__emit 0x0F;
		__emit 0x89;
		__emit 0xF2;
		__emit 0x00;
		__emit 0x00;
		__emit 0x00;
		__emit 0xD1;
		__emit 0xF8;
		__emit 0x89;
		__emit 0xC5;
		__emit 0x73;
		__emit 0x2C;
		__emit 0x00;
		__emit 0xDB;
		__emit 0x75;
		__emit 0x0F;
		__emit 0x3B;
		__emit 0x74;
		__emit 0x24;
		__emit 0x04;
		__emit 0x0F;
		__emit 0x83;
		__emit 0xB7;
		__emit 0x00;
		__emit 0x00;
		__emit 0x00;
		__emit 0x8A;
		__emit 0x1E;
		__emit 0x46;
		__emit 0x10;
		__emit 0xDB;
		__emit 0x11;
		__emit 0xC9;
		__emit 0xEB;
		__emit 0x58;
		__emit 0x00;
		__emit 0xDB;
		__emit 0x75;
		__emit 0x0F;
		__emit 0x3B;
		__emit 0x74;
		__emit 0x24;
		__emit 0x04;
		__emit 0x0F;
		__emit 0x83;
		__emit 0xA0;
		__emit 0x00;
		__emit 0x00;
		__emit 0x00;
		__emit 0x8A;
		__emit 0x1E;
		__emit 0x46;
		__emit 0x10;
		__emit 0xDB;
		__emit 0x72;
		__emit 0xD4;
		__emit 0x41;
		__emit 0x00;
		__emit 0xDB;
		__emit 0x75;
		__emit 0x0F;
		__emit 0x3B;
		__emit 0x74;
		__emit 0x24;
		__emit 0x04;
		__emit 0x0F;
		__emit 0x83;
		__emit 0x8A;
		__emit 0x00;
		__emit 0x00;
		__emit 0x00;
		__emit 0x8A;
		__emit 0x1E;
		__emit 0x46;
		__emit 0x10;
		__emit 0xDB;
		__emit 0x72;
		__emit 0xBE;
		__emit 0x00;
		__emit 0xDB;
		__emit 0x75;
		__emit 0x0B;
		__emit 0x3B;
		__emit 0x74;
		__emit 0x24;
		__emit 0x04;
		__emit 0x73;
		__emit 0x79;
		__emit 0x8A;
		__emit 0x1E;
		__emit 0x46;
		__emit 0x10;
		__emit 0xDB;
		__emit 0x11;
		__emit 0xC9;
		__emit 0x0F;
		__emit 0x88;
		__emit 0x8C;
		__emit 0x00;
		__emit 0x00;
		__emit 0x00;
		__emit 0x00;
		__emit 0xDB;
		__emit 0x73;
		__emit 0xE5;
		__emit 0x75;
		__emit 0x0D;
		__emit 0x3B;
		__emit 0x74;
		__emit 0x24;
		__emit 0x04;
		__emit 0x73;
		__emit 0x60;
		__emit 0x8A;
		__emit 0x1E;
		__emit 0x46;
		__emit 0x10;
		__emit 0xDB;
		__emit 0x73;
		__emit 0xD6;
		__emit 0x83;
		__emit 0xC1;
		__emit 0x02;
		__emit 0x81;
		__emit 0xFD;
		__emit 0x00;
		__emit 0xFB;
		__emit 0xFF;
		__emit 0xFF;
		__emit 0x83;
		__emit 0xD1;
		__emit 0x02;
		__emit 0x89;
		__emit 0xFA;
		__emit 0x01;
		__emit 0xCA;
		__emit 0x72;
		__emit 0x67;
		__emit 0x3B;
		__emit 0x14;
		__emit 0x24;
		__emit 0x77;
		__emit 0x62;
		__emit 0x89;
		__emit 0xFA;
		__emit 0x01;
		__emit 0xEA;
		__emit 0x73;
		__emit 0x63;
		__emit 0x3B;
		__emit 0x54;
		__emit 0x24;
		__emit 0x2C;
		__emit 0x72;
		__emit 0x5D;
		__emit 0x83;
		__emit 0xFD;
		__emit 0xFC;
		__emit 0x76;
		__emit 0x0E;
		__emit 0x8A;
		__emit 0x02;
		__emit 0x42;
		__emit 0x88;
		__emit 0x07;
		__emit 0x47;
		__emit 0x49;
		__emit 0x75;
		__emit 0xF7;
		__emit 0xE9;
		__emit 0xBD;
		__emit 0xFE;
		__emit 0xFF;
		__emit 0xFF;
		__emit 0x8B;
		__emit 0x02;
		__emit 0x83;
		__emit 0xC2;
		__emit 0x04;
		__emit 0x89;
		__emit 0x07;
		__emit 0x83;
		__emit 0xC7;
		__emit 0x04;
		__emit 0x83;
		__emit 0xE9;
		__emit 0x04;
		__emit 0x77;
		__emit 0xF1;
		__emit 0x01;
		__emit 0xCF;
		__emit 0x31;
		__emit 0xC9;
		__emit 0xE9;
		__emit 0xA5;
		__emit 0xFE;
		__emit 0xFF;
		__emit 0xFF;
		__emit 0x3B;
		__emit 0x3C;
		__emit 0x24;
		__emit 0x77;
		__emit 0x26;
		__emit 0x3B;
		__emit 0x74;
		__emit 0x24;
		__emit 0x04;
		__emit 0x76;
		__emit 0x07;
		__emit 0xB8;
		__emit 0x37;
		__emit 0xFF;
		__emit 0xFF;
		__emit 0xFF;
		__emit 0xEB;
		__emit 0x05;
		__emit 0x74;
		__emit 0x03;
		__emit 0x48;
		__emit 0xB0;
		__emit 0x33;
		__emit 0x2B;
		__emit 0x7C;
		__emit 0x24;
		__emit 0x2C;
		__emit 0x8B;
		__emit 0x54;
		__emit 0x24;
		__emit 0x30;
		__emit 0x89;
		__emit 0x3A;
		__emit 0x83;
		__emit 0xC4;
		__emit 0x08;
		__emit 0x5A;
		__emit 0x59;
		__emit 0x5B;
		__emit 0x5E;
		__emit 0x5F;
		__emit 0x5D;
		__emit 0xC3;
		__emit 0xB8;
		__emit 0x36;
		__emit 0xFF;
		__emit 0xFF;
		__emit 0xFF;
		__emit 0xEB;
		__emit 0xE5;
		__emit 0xB8;
		__emit 0x35;
		__emit 0xFF;
		__emit 0xFF;
		__emit 0xFF;
		__emit 0xEB;
		__emit 0xDE;
		__emit 0x83;
		__emit 0xC8;
		__emit 0xFF;
		__emit 0xEB;
		__emit 0xD9;
	}
}